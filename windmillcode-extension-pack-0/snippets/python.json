{

	"file running as main": {
		"prefix": "__main__",
		"body": [
			"if __name__ == '__main__':\n\t"
		],
		"description": "execute module code"
	},
	"python function": {
		"prefix": "def",
		"body": [
			"def $1():\n\t"
		],
		"description": "generate a python function"
	},
	"python local deps": {
		"prefix": "local_deps",
		"body": [
			"from utils.local_deps import local_deps\nlocal_deps()"
		],
		"description": "local deps for local install"
	},
	"pytest assert status code": {
		"prefix": "response.status_code",
		"body": [
			"assert response.status_code == $1"
		],
		"description": "assert response status code === 200"
	},
	"flask: route": {
    "prefix": "flask: route",
    "body": [
				"@$1.route('/$4', methods=['${3/(.*)/${1:/upcase}/}'])",
        "def $1_$2():",
        "    data = request.json.get('data', {})",
        "    resp_body = $6.$2(data)",
        "    res = APIMsgFormat(data=resp_body,msg=CONFIGS.endpoint_msg_codes[\"success\"])",
        "    return res.return_flask_response()",
				"# paste to test case file",
				"def test_$1_$2(client, mocker):",
				"",
				"    $2_mock = mocker.patch('$5.$6.$2', return_value=TestUtils.generic_fake_result)",
				"    req_body = {",
				"        'data': 'data'",
				"    }",
				"    response = client.$3('/$7/$4', json=req_body)",
				"",
				"    assert response.status_code == http.client.OK.value",
				"    assert TestUtils.generic_fake_result == response.json['data']",
				"",
				"    for index, call_args in enumerate($2_mock.call_args_list):",
				"        arguments = call_args[0]",
				"        assert arguments == (req_body['data'],)",
				""
    ]
},
	"flask: sqlalchemy query":{
		"prefix":"conn.execute",
		"body":[
			"stmt = text(\"\"\"\n$1\n\"\"\")\nself.sqlalchemy_0_conn.execute(stmt,{\n})\nself.sqlalchemy_0_conn.commit()"
		]
	},
	"python: it when called":{
		"prefix":"conn.execute",
		"body":[
			"when called",
			"under normal conditions",
			"does the required action"
		]
	}


}

